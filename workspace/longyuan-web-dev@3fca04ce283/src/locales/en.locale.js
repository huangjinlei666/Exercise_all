module.exports = {
  _element: 'en',
  _name: 'English',
  title: 'Fault Diagnosis System',
  backToIndex: 'Back to index',
  systemVersion: 'System Version',
  common: {
    noMachine: 'There is no model at this level, please click the fan level',
    add: 'Add',
    backToPrev: 'Back',
    delete: 'Delete',
    release: 'Release',
    calculation: 'Calculation',
    tip: 'Tip',
    edit: 'Edit',
    search: 'Search',
    query: 'Query',
    view: 'View',
    operation: 'Operation',
    confirm: 'Confirm',
    order: 'Order',
    cancel: 'Cancel',
    description: 'Description',
    unlogin: 'Not logged in',
    login: 'Login',
    logout: 'Log Out',
    logoutSure: 'Are you sure you want to log out',
    cancelLogout: 'Cancel logout',
    success: 'Success',
    error: 'Error',
    createTime: 'Created',
    searchText: 'Enter search text.',
    pleaseSelect: '--Select--',
    enable: 'Enable',
    disable: 'Disable',
    save: 'Save',
    every: 'Evety',
    reserve: 'reserve',
    groupData: 'groups data.',
    to: 'to',
    beginDate: 'begin date',
    endDate: 'end date',
    second: 'Second',
    minute: 'Minute',
    hour: 'Hour',
    day: 'Day',
    month: 'Month',
    import: 'Import',
    export: 'Export',
    id: 'ID',
    resetPwd: 'Reset password',
    editPwd: 'Edit password',
    seconds: 'second(s)',
    places: 'place(s)',
    download: 'Download',
    recentWeek: 'Last week',
    recentMonth: 'Last month',
    recentMonth3: 'Last 3 months',
    futureWeek: 'Next week',
    futureMonth: 'Next month',
    futureMonth3: 'Next 3 months',
    sensor: 'Sensor',
    selectedMachine: 'Selected wind turbines: ',
    noSelectedMachine: 'Select wind turbines from passes on the left.',
    verify: 'Verify',
    nodata: 'No data.',
    OK: 'Ok',
    ATTENTION: 'Attention',
    WARN: 'Warn',
    ERROR: 'Error',
    EMERGENCY: 'Emergency',
    OFFLINE: 'Offline',
    UNVERIFIED: 'Unverified',
    VERIFIED: 'Verified',
    prevPage: 'Prev',
    nextPage: 'Next',
    status: 'Status',
    copyright1: 'Copyright Â© 2011-',
    copyright2: ' FATRI (Xiamen) Technologies Co., Ltd.',
    exit: 'Exit',
    viewBoard: 'Bulletin board',
    browserNotSupportTip:
      'There may be compatibility issues with the current browser, please switch Google Chrome 69+, Firefox 47+ and Microsoft Edge browser for stable interaction experience.',
    pwdModifyTip:
      'The valid period of the current account password is less than 5 days. Please modify the password in time to avoid the account being disabled(The valid period of the account password is 90 days.).',
    mapLoadSuccess: 'Lbs amap is loaded successfully.',
    mapLoadError: 'Faile to load lbs amap.',
    noMenu: 'No menu',
    more: 'More',
    picture: 'Picture',
    file: 'File',
    showBasicFrequency: 'Show basic',
    hideBasicFrequency: 'Hide basic',
    showEdgeFrequency: 'Show edge',
    hideEdgeFrequency: 'Show edge',
    setEdgeFrequency: 'Set edge',
    placeholder: {
      picture: 'Upload picture.',
      file: 'Upload file',
      edgeFrequency: 'Enter side frequency.',
    },
    detail: 'Detail',
    close: 'Close',
    sync: 'Synchronize',
    back: 'Back',
    handle: 'Handle',
    push: 'Push to group',
    abnormal: 'abnormal',
    deleteSure: 'Are you sure you want to delete',
    yes: 'Yes',
    no: 'No',
  },
  menu: {
    gearFrequency: 'Gear Frequency',
    frontEndLog: 'Front end logs',
    overview: 'Overview',
    monitor: 'Monitor',
    routineAtlas: 'Routine atlas',
    general: 'General map',
    trend: 'Trend map',
    trendDoubling: 'Trend map(Doubling)',
    waveform: 'Waveform map',
    spectrum: 'Spectrogram',
    cepstrumSpectrum: 'Cepstrum spectrum',
    integral: 'Integral diagram',
    envelope: 'Envelope diagram',
    axisOrbit: 'Axis orbit',
    waterfall: 'Waterfall plot',
    polar: 'Polar plot',
    startStopAtlas: 'Start & stop atlas',
    speedTime: 'Speed time plot',
    nyquist: 'Nyquist diagram',
    bode: 'Bode plot',
    listLogs: 'Fault diagnosis',
    alarmLog: 'Alarm log',
    systemSet: 'System logs',
    userManage: 'User management',
    roleManage: 'Role management',
    projectSet: 'Project settings',
    strategySend: 'Send strategy',
    publicStrategy: 'Public strategy',
    atlasSet: 'Atlas settings',
    alarmSet: 'Alarm settings',
    dataManage: 'Data management',
    dilutionRule: 'Storage dilution rules',
    bearing: 'Bearing DB',
    gearbox: 'Gearbox DB import',
    history: 'Historical data',
    device: 'Device management',
    sensorManage: 'Sensor management',
    database: 'Data base',
    categoryMng: 'Category Mng',
    documentMng: 'Document Mng',
    faultReasonList: 'Fault reason',
    faultDiagnosis: 'Fault diagnosis',
    faultDiagnosisBatch: 'Diagnosis batch',
    sycnList: 'Sync list',
    standingBook: 'Standing Book',
    vibrationMonitoring: 'Vibration Monitoring',
    alternator: 'Alternator',
    gearcase: 'Gear Case',
    principalAxis: 'Principal Axis',
    blade: 'Blade',
    frequencyCount: 'Frequency Count',
    coupling: 'Coupling',
    bearingPosition: 'Bearing Position',
    equipmentTemplate: 'Equipment Template',
    equipmentMng: 'Equipment Management',
    templateMng: 'Template Management',
    productTemplate: 'Product Template',
    deviceLifeCycle: 'Device Life Cycle',
    addDevice: 'Add Device',
    deviceSet: 'Device Set',
    fan: 'Account fan',
    diagnosis: 'Diagnosis',
  },
  pass: {
    passInfo: 'Passes',
    addPass: 'Add pass',
    editPass: 'Edit pass',
    deletePass: 'Delete pass',
    projectName: 'Group name',
    customerName: 'Customer name',
    projectDesc: 'Group description',
    factoryName: 'Company name',
    regionCode: 'Region',
    location: 'Location',
    longitude: 'Longitude',
    latitude: 'Latitude',
    workshopName: 'Wind farm name',
    address: 'Wind farm address',
    workGroupName: 'Wind turbines name',
    workGroupType: 'Wind turbines type',
    workGroupModel: 'Brand model',
    criticalSpeed1: 'First critical speed',
    criticalSpeed2: 'Second critical speed',
    criticalSpeed: 'Rated speed',
    modelName: 'Solid model',
    isReCalculateRP: 'Re-calculate critical speed',
    deleteTitle: 'Are you sure to delete the following pass(es)?',
    deleteTip: 'The data cannot be recovered after deletion.',
    id: 'ID',
    directDrive: 'Direct drive',
    nonDirectDrive: 'Non direct drive',
    placeholder: {
      projectName: 'Enter group name.',
      customerName: 'Select customer name.',
      projectDesc: 'Enter project description.',
      factoryName: 'Enter company name.',
      regionCode: 'Select region.',
      location: 'Enter loaction.',
      longitude: 'Enter longitude.',
      latitude: 'Enter latitude.',
      workshopName: 'Enter wind farm name.',
      address: 'Enter wind farm address.',
      workGroupName: 'Enter wind turbines name, which consists of 1-16 characters.',
      workGroupType: 'Enter wind turbines type.',
      workGroupModel: 'Enter brand model.',
      criticalSpeed1: 'Enter 1st critical speed.',
      criticalSpeed2: 'Enter 2rd critical speed.',
      criticalSpeed: 'Enter rated speed.',
      modelName: 'Select solid model.',
    },
    success: {
      createPass: 'Create {0} successfully.',
      updatePass: 'Update {0} successfully.',
      deletePass: 'Delete {0} successfully.',
    },
    failure: {
      createPass: 'Failed to create {0}.',
      updatePass: 'Failed to update {0}.',
      deletePass: 'Failed to delete {0}.',
    },
    invalid: {
      projectName: 'Consist of 1-32 characters.',
      customerName: 'Consist of 1-32 characters.',
      description: 'Consist of 1-32 characters.',
      factoryName: 'Consist of 1-32 characters.',
      location: 'Consist of 1-32 characters.',
      longitude: 'The value range is (+-)0-180, with 0-6 decimal places reserved.',
      latitude: 'The value range is (+-)0-90, with 0-6 decimal places reserved.',
      workshopName: 'Consist of 1-32 characters.',
      address: 'Consist of 1-32 characters.',
      workGroupName: 'Consist of 1-32 characters.',
      workGroupType: 'Consist of 1-32 characters.',
      workGroupModel: 'Consist of 1-32 characters.',
      criticalSpeed: 'Floating number(0-9999, up to 6 decimal places).',
    },
    selectPass: 'Select pass',
  },
  overview: {
    urLocation: 'Your location: ',
    workGroupNumber: 'Wind turbines count',
    normalDevice: 'Normal',
    attentionDevice: 'Attention',
    warnDevice: 'Warn',
    errorDevice: 'Error',
    emergencyDevice: 'Emergency',
    warnErrorNumber: 'Alarm Count',
    ok: 'OK',
    attention: 'Attention',
    warn: 'Warn',
    error: 'Error',
    emergency: 'Emergency',
    total: 'Total',
    sensorNumber: 'Sensor number',
    noFactoryData: 'No factory data.',
    noWorkshopData: 'No wind farm data.',
    noMachineData: 'No wind turbines data.',
    noSensorData: 'No sensor data.',
    noVariateData: 'No variable data.',
  },
  user: {
    ChartSetting: 'Chart Setting',
    viewUser: 'View user',
    addUser: 'Add user',
    editUser: 'Edit user',
    deleteUser: 'Delete user',
    roleSet: 'Role set',
    userManage: 'User management',
    loginName: 'Login email/telephone',
    username: 'User nickname',
    userId: 'User ID',
    email: 'Login email',
    phoneNumber: 'Login telephone',
    affiliated: 'Affiliated',
    password: 'Password',
    dataPermission: 'Data permission',
    deleteTitle: 'Are you sure to delete the following user(s)?',
    deleteTip: 'The data cannot be recovered after deletion.',
    featurePermission: 'Feature permission',
    resetPwdText: 'Are you sure to reset the password of user {0}?',
    oldPwd: 'Old password',
    newPwd: 'New password',
    confirmPwd: 'Confirm password',
    changeDataPermission: 'Data Permission',
    SystemAdministrator: 'System Administrator',
    Operator: 'Operator',
    Engineer: 'Engineer',
    Administrator: 'Administrator',
    ViewData: 'View data',
    ConfirmAlarm: 'Confirm alarm',
    GenerateReport: 'Generate report',
    ProjectManage: 'Project manage',
    ChangeAlarmValue: 'Change alarm value',
    UserManage: 'User manage',
    AddAlgorithm: 'Add algorithm',
    BackupDatabase: 'Backup database',
    account: 'Account',
    placeholder: {
      username: 'Enter user nickname.',
      emailPhone: ' enter the login email or mobile number',
      email: 'Enter login email.',
      telephone: 'Enter login telephone',
      pwd: 'Enter password.',
      description: 'Enter description.',
      roleId: 'Select role.',
      oldPwd: 'Enter old password.',
      newPwd: 'Enter new password.',
      confirmPwd: 'Confirm password',
      choosePermission: 'Choose Permission',
      verificationCode: 'Verification code',
    },
    invalid: {
      accountValid: 'Invalid account, format: email or telephone.',
      pwdValid: 'Consist of 8-20 letters, digits, and at least 3 special symbols(!"#$%&\'()*+,-./:;<=>?@[]^_`{|}~).',
      pwd: 'Password format error',
      newPwdValid: 'The new password cannot be the same as the old.',
      usernameValid: 'Consist of 1-32 Chinese characters, letters, digits, at(@), dot(.), underscore(_) and hyphen(-).',
      emailValid: 'Invalid email.',
      phoneValid: 'Invalid telephone number.',
      emailPhoneValid: 'Fill in at least one email or telephone number.',
      confirmPwdValid: 'Two passwords that you enter is inconsistent.',
      descriptionValid: 'Invalid description, length: 0-255.',
      dataPermission: 'Select data permission.',
      roleErrorInfo: 'Failed to get user information. Try again later please.',
    },
    success: {
      createUser: 'Create user {0} successfully.',
      updateUser: 'Update user {0} successfully.',
      deleteUser: 'Delete user {0} successfully.',
      enableUser: 'Enable user {0} successfully.',
      disableUser: 'Disable user {0} successfully',
      resetPwd: 'Reset the password of user {0} successfully.',
      changePwd: 'Change the password of user {0} successfully.',
      assignUser: 'Update the data permission of user {0} successfully.',
    },
    failure: {
      createUser: 'Failed to create user {0}.',
      updateUser: 'Failed to update user {0}.',
      deleteUser: 'Failed to delete user {0}.',
      enableUser: 'Failed to enable user {0}.',
      disableUser: 'Failed to disable user {0}.',
      resetPwd: 'Failed to reset the password of user{0}.',
      changePwd: 'Failed to change the password of user {0}.',
      assignUser: 'Failed to update the data permission of user {0}.',
    },
  },
  role: {
    addRole: 'Add role',
    editRole: 'Edit role',
    deleteRole: 'Delete role',
    roleName: 'Role name',
    description: 'Role description',
    permission: 'Menu permission',
    deleteTitle: 'Are you sure to delete the following role(s)?',
    deleteTip: 'The data cannot be recovered after deletion.',
    placeholder: {
      roleName: 'Enter role name',
      description: 'Enter role description',
    },
    invalid: {
      roleName: 'Consist of 1-32 Chinese characters, letters, digits, at(@), dot(.), underscore(_) and hyphen(-).',
    },
    success: {
      createRole: 'Create role {0} successfully.',
      updateRole: 'Update role {0} successfully.',
      deleteRole: 'Delete role {0} successfully.',
      enableRole: 'Enable role {0} successfully.',
      disableRole: 'Disable role {0} successfully',
    },
    failure: {
      createRole: 'Failed to create role {0}.',
      updateRole: 'Failed to update role {0}.',
      deleteRole: 'Failed to delete role {0}.',
      enableRole: 'Failed to enable role {0}.',
      disableRole: 'Failed to disable role {0}.',
    },
  },
  publicStrategy: {
    publicStrategyDB: 'Public strategy',
    policyName: 'Policy name',
    createdAt: 'Creation time',
    updatedAt: 'Update time',
    remarke: 'remarks',
    add: 'Add parameter',
    edit: 'modify parameters',
    delete: 'Delete parameter',
    addPublicStrategy: 'Add public policy',
    editPublicStrategy: 'Edit public policy',
    setUp: 'Public policy parameter settings',
    deleteStrategy: 'Delete public policy',
    deleteTitle: 'Are you sure you want to delete the following public policies?',
    deleteTip: 'Deleted data cannot be recovered',
    addPubliPparameters: 'Add public policy parameters',
    parameterName: 'Chinese name of parameter',
    identifier: 'Parameter eigenvalue',
    dataType: 'data type',
    deleteStrategyPamers: 'Delete public policy parameters',
    check: 'Verification failed!',
    setValuesTip: 'Required',
    detailTitle: 'Public strategy details',
    fanEquipment: 'Fan equipment',
    issStrategy: 'Issue public policy',
    string: 'String',
    integer: 'Integer',
    float: 'Float',
    boolean: 'Boolean',
    characterLimit: 'The character length cannot exceed 200',
    nameLimit: 'The character length cannot exceed 128',
    identifierLimit: 'The character length cannot exceed 32',
    notJson: 'It is not the standard JSON',
    placeholder: {
      policyName: 'Please enter a policy name',
      remarke: 'Please enter your comments',
      addPubliPparameters: 'Please enter the name of the public policy parameter',
      identifier: 'Please input parameter characteristic value',
      dataType: 'Please select data type',
    },
    success: {
      createStrategy: 'Public creation policy succeeded!',
      updateStrategy: 'Public policy updated successfully!',
      deleteStrategy: 'Public policy deleted successfully!',
      deleteStrategyPamars: 'Public policy parameters deleted successfully!',
      updateStrategyPamars: 'Public policy parameter value saved successfully!',
    },
    failure: {
      deleteStrategyPamars: 'Public policy parameter deletion failed!',
    },
    addContent: 'New policy content',
    enterNum: 'Enter a number',
  },
  strategySend: {
    strategySendDB: 'Threshold distribution',
    identifier: 'characteristic value',
    name: 'Eigenvalue name',
    readWriteType: 'Data read / write type',
    issue: 'Issue',
    expectedValue: 'Expected value',
    editExpectedValue: 'Edit expectations',
    fanEquipment: 'Fan Equipment',
    issStrategy: 'Issue public strategy',
    invalid: {
      integer: 'Please enter an integer',
      float: 'Please enter floating point number',
      boolean: 'Please enter a Boolean value',
      string: 'Please enter the expected value',
    },
    placeholder: {
      expectedValue: 'Please enter the expected value',
    },
    success: {
      issueMessage: 'Threshold issued successfully!',
    },
  },
  atlasSet: {
    atlasSet: 'Atlas setting',
    refresh: 'Atlas refresh time',
    speed: 'Speed',
    process: 'Process quantity',
    global: 'General appearance map',
    decimal: 'Decimals',
    significant: 'Significant digits',
    placeholder: {
      second: 'Enter the seconds.',
      place: 'Enter the places.',
    },
    success: {
      success: 'Update atlas seeting successfully.',
    },
    failure: {
      failure: 'Faile to update atlas setting.',
    },
  },
  dilution: {
    dilution: 'Dilution',
    dataDilution: 'Dilution of stable data',
    digitDilution: 'Dilution of numerical value',
    arrayDilution: 'Dilution of array value',
    timeSelect: 'Time select',
    dilutionStrategy: 'Dilution strategy',
    placeholder: {
      unit: 'Select unit.',
    },
    invalid: {
      timeRange: 'Select time range.',
      intervalUnit: 'Select interval unit.',
    },
    success: {
      update: 'Dilute data successfully.',
    },
    failure: {
      update: 'Failed to dilute the data.',
    },
  },
  bearing: {
    bearingDb: 'Bearing database',
    bearingId: 'Bearing ID',
    bearingNumber: 'Bearing type',
    rollNumber: 'Number of rollers',
    cageFrequency: 'Cage frequency',
    rollFrequency: 'Rolling body frequency',
    outerFrequency: 'Outer frequency',
    innerFrequency: 'Inner frequency',
    addBearing: 'Add bearing',
    editBearing: 'Edit bearing',
    deleteBearing: 'Delete bearing',
    deleteTitle: 'Are you sure to delete the following bearing(s)?',
    deleteTip: 'The data cannot be recovered after deletion.',
    PENDING: 'Pending',
    PASSED: 'Approved',
    NOT_PASSED: 'Failed',
    approve: 'Approve',
    approveSuccess: 'Agree',
    approveFailed: 'Disagree',
    confirmApproveResult: 'Confirm approval result.',
    downloadTemplate: 'Download template',
    placeholder: {
      bearingNumber: 'Enter bearing type.',
      frequency: 'Enter frequency.',
      rollNumber: 'Enter number of rollers.',
      rollingElementDiameter: 'Enter rolling element diameter',
      pitchDiameter: 'Enter pitch diameter',
      contactAngle: 'Enter contact angle',
      rollingNumber: 'Enter rolling number',
      speed: 'Enter speed',
      outerRingSpeed: 'Enter outerRing speed',
    },
    invalid: {
      bearingNumber: 'Consist of 1-64 characters.',
      frequency:
        'Enter frequency (nonnegative float less than 1000, Up to 6 digits before the decimal point and up to 10 digits after the decimal point).',
      rollNumber: 'Positive integer less than 1000.',
    },
    success: {
      createBearing: 'Create bearing successfully.',
      updateBearing: 'Update bearing successfully.',
      deleteBearing: 'Delete bearing successfully.',
      importBearing: 'Import bearing data successfully.',
      approve: 'Approve bearing data successfully.',
    },
    failure: {
      createBearing: 'Failed to create bearing.',
      updateBearing: 'Failed to update bearing.',
      deleteBearing: 'Failed to delete bearing.',
      importBearing: 'Failed to import bearing data.',
      approve: 'Failed to approve bearing data.',
    },
  },
  standingBook: {
    standingBookDb: 'Basic information of unit equipment account',
    brand: 'Brand',
    watt: 'Watt',
    unitNumber: 'Unit Number',
    model: 'Model',
    creationTime: 'Creation Time',
    success: {
      synchronization: 'Wind farm data synchronization successful',
    },
    failure: {
      synchronization: 'Wind farm data synchronization failed',
    },
  },
  vibrationMonitoring: {
    windFarm: 'Wind Farm',
    windField: 'Wind Field',
    vibrationDb: 'Account information of vibration monitoring equipment',
    unitNumber: 'Unit Number',
    model: 'Model',
    dataDevice: 'Data Device',
    manufactor: 'Manufactor',
    type: 'Type',
    factoryNo: 'Factory No',
    factoryDate: 'Factory Date',
    speedSensor: 'Speed Sensor',
    installPosition: 'Install Position',
    pointPosition: 'Point Position',
    serialNo: 'Serial No',
    sensitivity: 'Sensitivity',
    acceleratorSensor: 'Accelerator sensor',
  },
  alternator: {
    alternator: 'Alternator',
    alternatorDb: 'Generator information',
    manufacturer: 'Manufacturer',
    model: 'Model',
    source: 'Source',
    fanType: 'Fan Type',
    generatorManufacturer: 'Generator Manufacturer',
    generatorType: 'Generator Type',
    brandGrease: 'Brand Grease',
  },
  gearcase: {
    gearcaseDB: 'Gear Case',
    transmissionForm: 'Transmission Form',
    manufacture: 'Gearbox manufacturer',
    transmissionRate: 'Transmission Rate',
    remark: 'Remark',
    fanMachineType: 'Fan Type',
    gearboxType: 'Gearbox Type',
  },
  principalAxis: {
    principalAxisDB: 'Account information',
    manufactor: 'Main engine manufacturer',
    model: 'Model',
    traditionalLayout: 'Traditional Layout',
    bearingConfig: 'Bearing Config',
    remarks: 'Remarks',
    source: 'Source',
  },
  fan: {
    fanDB: 'Account Fan',
    factoryName: 'Factory name',
    workshopName: 'Workshop name',
    machineName: 'Machine name',
    uniqueNumber: 'Unique number',
    sensorName: 'Sensor name',
    machineModel: 'Machine model',
    success: {
      importFan: 'Import success',
      syncSuccess: 'Sync success',
    },
    failure: {
      importFan: 'Import fail',
      syncFail: 'Sync fail',
    },
    placeholder: {
      inputUniqueNumber: 'Input Unique Number',
    },
  },
  blade: {
    bladeDB: 'Account information',
    bladeManufacture: 'Blade manufacturer',
    bladeModel: 'Blade model',
    pitchBearingManufacture: 'PitchBearing Manufacture',
    pitchBearingType: 'Pitch Bearing Type',
  },
  frequencyCount: {
    frequencyCountDB: 'Calculation of gear characteristic frequency',
    sunGear: 'Sun gear',
    planetGear: 'Planet gear',
    internalGear: 'Internal gear',
    planetaryGear: 'Planet gear',
    inputSpeed: 'Gearbox input speed',
    outputSpeed: 'Gearbox output speed',
    transmissionRatio: 'Transmission ratio',
    inputMultiple: 'Input multiple',
    calculationResults: 'Calculation results',
    series: 'Series:',
    frequencyDoubling: 'Frequency doubling',
    gearEngagement: 'Gear engagement',
    equipmentFrequency: 'Equipment frequency',
    toothFrequency: 'Tooth repetition rate',
    sunGearFrequency: 'Sun gear frequency',
    planetGearFrequenc: 'Planetary frequency',
    internalGearFrequenc: 'Internal gear frequency',
    planetaryGearFrequenc: 'Planetary gear frequency',
    sunGearDefect: 'Sun gear defect',
    planetGearDefect: 'Planetary gear defect',
    internalGearDefect: 'Internal gear defect',
    harmonic: 'Harmonic',
    solarSideband: 'Solar sideband F0',
    planetaryBeltF8: 'Planetary sideband F8',
    planetaryBeltF1: 'Planetary sideband F1',
    placeholder: {
      sunGear: 'Please input the number of sun gears',
      planetGear: 'Please input the number of planetary gears',
      internalGear: 'Please input the number of internal gears',
      planetaryGear: 'Please enter the number of planetary gears',
      inputSpeed: 'Please input the speed',
      inputMultiple: 'Please input multiple',
      numValue: 'Please enter the value',
      numGears: 'The number of gears should not exceed 2000',
      multiple: 'The multiple cannot exceed 100',
      speed50: 'The speed should not exceed 50',
      speed6000: 'The rotation speed should not exceed 6000',
      inputHarmonic: 'Please input harmonic',
    },
  },
  gearFrequency: {
    lowSpeedLargr: 'Low speed shaft big gear',
    middleLarge: 'Intermediate shaft big tooth',
    middleSmall: 'Countershaft pinion',
    highSpeedLarge: 'High speed shaft big teeth',
    highSpeedSmall: 'High speed shaft pinion',
    frequencyCountDB: 'Gear characteristic frequency calculation',
    sunGear: 'Sun gear tooth',
    planetGear: 'Planetary gear teeth',
    internalGear: 'Internal ring gear',
    inputSpeed: 'Input speed',
    outputSpeed: 'Output speed',
    transmissionRatio: 'transmission ratio',
    inputMultiple: 'harmonic',
    calculationResults: 'Calculation results',
    frequencyDoubling: 'frequency doubling',
    harmonic: 'multiple',
    PlanetaryMeshingFrequency: 'Planetary meshing frequency',
    middleMeshingFrequency: 'Intermediate stage meshing frequency',
    highSpeedMeshingFrequency: 'High speed meshing frequency',
    primarySun: 'Primary sun gear',
    primaryPlanet: 'Primary planetary gear teeth',
    PrimaryInternal: 'Primary internal ring gear',
    secondarySun: 'Secondary sun gear',
    secondaryPlanet: 'Secondary planetary gear teeth',
    secondInternal: 'Secondary internal ring gear',
    primaryPlanetaryMeshing: 'Primary planetary meshing frequency',
    secondPlanetaryMeshing: 'Secondary planetary meshing frequency',
    required: 'Please enter a required parameter',
    existence: 'All required parameters exist',
    forwardPush: 'Forward push',
    pushBack: 'Push back',
    titleOne: 'The first planet is parallel to the second',
    titleTwo: 'Two planets are parallel to one another',
    placeholder: {
      lowSpeedLargr: 'Please enter the number of large teeth of low speed shaft',
      sunGear: 'Please enter the number of sun gear teeth',
      planetGear: 'Please enter the number of planetary teeth',
      internalGear: 'Please enter the number of teeth of the inner ring gear',
      planetaryGear: 'Please enter the number of planetary gears',
      inputSpeed: 'Please enter the speed',
      inputMultiple: 'Please enter the number of harmonics',
      gearsNo: 'Please enter the number of gears',
      inputHarmonic: 'Please enter multiple',
      middleLarge: 'Please enter the number of large teeth of the intermediate shaft',
      middleSmall: 'Please enter the number of pinion teeth of the intermediate shaft',
      highSpeedLarge: 'Please enter the number of large teeth of high-speed shaft',
      highSpeedSmall: 'Please enter the number of small teeth of high-speed shaft',
      primarySun: 'Please enter the number of primary sun gear teeth',
      primaryPlanet: 'Please enter the number of primary planetary teeth',
      PrimaryInternal: 'Please enter the number of teeth of the primary internal ring gear',
      secondarySun: 'Please enter the number of secondary sun gear teeth',
      secondaryPlanet: 'Please enter the number of secondary planetary teeth',
      secondInternal: 'Please enter the number of teeth of the secondary internal ring gear',
      transmissionRatio: 'Please enter the rotation ratio',
      transmissionRatioNum: 'The speed ratio must be numeric',
      sunGearNum: 'The number of sun gear teeth must be numeric',
      planetGearNum: 'The number of planetary teeth must be numeric',
      internalGearNum: 'The number of teeth of the inner ring gear must be a numerical value',
      planetaryGearNum: 'The number of planetary gears must be numeric',
      middleSmallNum: 'The number of countershaft pinions must be numeric',
      lowSpeedLargrNum: 'The number of large teeth of the low speed shaft must be a numerical value',
      primarySunNum: 'The number of primary sun gear teeth must be numeric',
      primaryPlanetNum: 'The number of primary planetary teeth must be numeric',
      PrimaryInternalNum: 'The number of teeth of the primary internal ring gear must be a numerical value',
      secondarySunNum: 'The number of secondary sun gear teeth must be numeric',
      secondaryPlanetNum: 'The number of secondary planetary teeth must be numeric',
      secondInternalNum: 'The number of teeth of the secondary internal ring gear must be a numerical value',
      middleLargeNum: 'The number of large teeth of the intermediate shaft must be a numerical value',
      highSpeedSmallNum: 'The number of small teeth of high-speed shaft must be numeric',
      inputSpeedNum: 'The speed must be numeric',
      inputHarmonicNum: 'Multiple must be numeric',
      inputHarmonic5: 'Multiple must be less than or equal to five',
    },
  },
  coupling: {
    couplingDB: 'Journal coupling',
    couplingManufacture: 'Coupling Manufacture',
    couplingType: 'Coupling type (rigid or elastic)',
    couplingModel: 'Coupling Model',
  },
  bearingPosition: {
    bearingDb: 'Bearing Position',
    dicType: 'Parts',
    itemKey: 'ID',
    itemValue: 'Bearing Position',
    addBearing: 'New bearing position',
    editBearing: 'Update bearing position',
    bearingPart: 'Bearing components',
    mainaxis: 'Mainaxis',
    alternator: 'Alternator',
    gearboxfeatue: 'Gear box',
    placeholder: {
      bearingPart: 'Please select bearing parts',
      bearingDb: 'Please input bearing position',
    },
  },
  screen: {
    speedRatio: 'Speed Ratio',
    dataAcquisitionNo: 'Data Acquisition No',
    dataAcquisitionTime: 'Data Acquisition Time',
    timeDifference: 'Time Difference',
    alarmList: 'Alarm list',
    alarmTrend: 'Wind turbine alarm trend',
    deviceInfo: 'Device information',
    fansNo: 'Number of connected fans',
    onlineQuantity: 'Number of online devices',
    alarmNo: 'Number of alarm devices',
    failuresNo: 'Number of faulty equipment',
    platform: 'Platform',
    bearingModel: 'Bearing model',
    gearboxModel: 'Gearbox model',
    generatorModel: 'Generator model',
    deviceStatus: 'Device status',
    equipmentValue: 'Equipment characteristic value',
    fanInfo: 'Fan information',
    brand: 'Brand',
    type: 'Type',
    watt: 'Watt',
    faultyEquipmentTop5: 'Top 5 brands of faulty equipment',
    equipmentStatistics: 'Breakdown equipment statistics',
    faultFarmsTop5: 'Top 5 number of fault wind farms',
    FailureCauseStatistics: 'Failure cause statistics',
    componentStatisticsArtificial: 'Statistics of manual failure components',
    componentStatisticsWarning: 'Statistics of warning failure components',
    month: 'Month',
    quantityTime: 'Quantity (Times)',
    deviceTotal: 'Total number of devices',
    second: 'Second',
    workFan: 'Work fan',
    monitoringFan: 'Monitoring fan',
    warningFan: 'Warning fan',
    falutFan: 'Falut fan',
    dataDevice: 'Device',
    sensorStatus: 'Sensor status',
    online: 'online',
    offline: 'offline',
    fanFaultStatus: 'Fan fault status',
    fanList: 'Fan list',
    bearingManufacturerModel: 'Bearing Manufacturer Model',
    gearboxManufacturerModel: 'Gearbox Manufacturer Model',
    generatorManufacturerModel: 'Generator Manufacturer Model',
    statusInfo: 'Status Info',
    monitorDeviceInfo: 'Monitor Device Info',
    dataDeviceNo: 'Device No',
    dataDeviceTime: 'Device Time',
    vibrationSensor: 'Vibration Sensor',
    speedSensor: 'Speed Sensor',
    attentionFan: 'Attention Fan',
    alarmFan: 'Alarm Fan',
    sensorList: 'Sensor List',
    devicePhoto: 'Device photos',
    deviceHistory: 'Device History',
    diaglosis: 'Diaglosis and analyse',
  },
  gearbox: {
    gearboxDb: 'Gearbox database',
    factory: 'Manufacturer',
    gearType: 'Gear type',
    gearModel: 'Gear model',
    ratio: 'Transmission ratio',
    drawing: 'Drawing sheet',
    addGearbox: 'Add gearbox',
    editGearbox: 'Edit gearbox',
    deleteGearbox: 'Delete gearbox',
    deleteTitle: 'Are you sure to delete the following gearbox(es)?',
    deleteTip: 'The data cannot be recovered after deletion.',
    viewDrawing: 'View drawing',
    uploadPic: 'Upload drawing',
    imageFormat: 'Uploaded images can only be in JPG format!',
    imageSize: 'The size of the uploaded image cannot exceed 2MB!',
    downloadTemplate: 'Download template',
    placeholder: {
      factory: 'Enter manufacturer.',
      gearType: 'Enter gearbox type.',
      gearModel: 'Enter gearbox model.',
      ratio: 'Enter transmission ratio.',
      drawing: 'Select drawing sheet.',
    },
    invalid: {
      factory: 'Consist of 1-64 Chinese characters, letters, digits, at(@), dot(.), underscore(_) and hyphen(-).',
      gearType: 'Consist of 1-32 characters.',
      gearModel: 'Consist of 1-32 characters.',
      ratio: 'Consist of 1-32 characters.',
    },
    success: {
      create: 'Create gearbox successfully.',
      update: 'Update gearbox successfully.',
      delete: 'Delete gearbox successfully.',
      drawingUpload: 'Upload drawing sheet successfully.',
    },
    failure: {
      create: 'Failed to create gearbox.',
      update: 'Failed to update gearbox.',
      delete: 'Failed to delete gearbox.',
      drawingUpload: 'Failed to upload drawing sheet.',
      drawing: 'Failed to load the drawing sheet.',
    },
  },
  syncList: {
    syncTask: 'Synchronization task',
    syncType: 'Synchronization type',
    syncTime: 'Synchronization time',
    syncStatus: 'Synchronization status',
    check: 'Check',
    sync: 'Synchronization',
    characteristicValue: 'Characteristic value',
    sensorName: 'Sensor name',
    createdAt: 'Created time',
    statusObj: {
      success: 'Success',
      unsuccess: 'Unsuccess',
    },
    syncTypes: {
      trendEigenvalue: 'Trend eigenvalue',
      rawData: 'Raw data',
      thresholdAlarm: 'Threshold alarm',
    },
    syncSuccess: 'Synchronization succeeded',
  },
  alarmSet: {
    ID: 'Alarm setting ID',
    addAlarmSet: 'Add alarm setting',
    editAlarmSet: 'Edit alarm setting',
    deleteAlarmSet: 'Delete alarm setting',
    alertSet: 'Alarm setting',
    workGroup: 'Wind turbines',
    work: 'Operating mode',
    sensor: 'Sensor',
    variety: 'Variable type',
    attentionValue: 'Attention value',
    warnValue: 'Warn value',
    errorValue: 'Error value',
    emergencyValue: 'Emergency value',
    deleteTitle: 'Are you sure to delete the following alarm setting(s)?',
    deleteTip: 'The data cannot be recovered after deletion.',
    frequencyBandSet: 'Frequency band set',
    lowCut: 'Low cut',
    heightCut: 'Height cut',
    AccelerationEffective: 'Acceleration effective',
    SpeedEffective: 'Speed effective',
    AccelerationPeak: 'Acceleration peak',
    Kurtosis: 'Kurtosis',
    factoryLevel: 'Factory level',
    globalSetting: 'Global setting',
    placeholder: {
      sensor: 'Select sensor.',
      xsensor: 'Select X-axis sensor.',
      ysensor: 'Select Y-axis sensor.',
      variates: 'Select variates.',
      attentionValue: 'Enter attention value.',
      warnValue: 'Enter warn value.',
      errorValue: 'Enter error value.',
      emergencyValue: 'Enter emergency value.',
      lowCut: 'Enter low cut',
      heightCut: 'Enter height cut',
    },
    invalid: {
      selectParams: 'Select wind turbines first.',
      attentionValue:
        'Floating number, upÂ toÂ 6Â digitsÂ forÂ integerÂ partÂ andÂ 10Â forÂ decimalÂ part, less than the warn value.',
      warnValue:
        'Floating number, upÂ toÂ 6Â digitsÂ forÂ integerÂ partÂ andÂ 10Â forÂ decimalÂ part, less than the error value and more than the attention value.',
      errorValue:
        'Floating number, upÂ toÂ 6Â digitsÂ forÂ integerÂ partÂ andÂ 10Â forÂ decimalÂ part, less than the emergency value and more than the warn value.',
      emergencyValue:
        'Floating number, upÂ toÂ 6Â digitsÂ forÂ integerÂ partÂ andÂ 10Â forÂ decimalÂ part, more than the error value.',
    },
    success: {
      create: 'Create alarm setting successfully.',
      update: 'Update alarm setting successfully.',
      delete: 'Delete alarm setting successfully.',
      enable: 'Enalbe global setting successfully.',
      disable: 'Disable global setting successfully.',
    },
    failure: {
      create: 'Failed to create alarm setting.',
      update: 'Failed to update alarm setting.',
      delete: 'Failed to delete alarm setting.',
      enable: 'Enalbe global setting Failed.',
      disable: 'Disable global setting Failed.',
    },
  },
  history: {
    fileId: 'File ID',
    history: 'Historical data',
    csvExport: 'CSV export',
    csvExportSuccess: 'CSV export succeeded',
    txtExport: 'TXT export',
    txtExportSuccess: 'TXT export succeeded',
    exportFail: 'File export failed',
    oneExport: 'Export',
    nodeName: 'Node name',
    dataFormat: 'Data format',
    fileNumber: 'File number',
    dataSize: 'Data size',
    byte: 'Byte(s)',
    exportDataSuccess: 'Export data success',
    fileName: 'File name',
    longCsvExport: 'Long waveform CSV export',
    longTxtExport: 'Long waveform TXT export',
    longCsvExportSuccess: 'Long waveform CSV exported successfully',
    longTxtExportSuccess: 'Long waveform TXT exported successfully',
    invalid: {
      selectParam: 'Select sensor, variates and time range first.',
      selectWindfarm: 'Select a wind farm.',
      selectMachine: 'Select a wind turbine.',
      selectSensor: 'Select a sensor.',
    },
    templateManage: 'Template manage',
    templateName: 'Template name',
    addTemplate: 'Add template',
    editTemplate: 'Edit template',
    viewTemplate: 'View template',
    placeholder: {
      templateName: 'Please enter template name',
      selectTemplate: 'Select a template',
    },
    success: {
      create: 'Create template successfully.',
      update: 'Update template successfully.',
      delete: 'Delete template successfully.',
    },
    failure: {
      create: 'Failed to create template.',
      update: 'Failed to update template.',
      delete: 'Failed to delete template.',
    },
  },
  alarmLog: {
    fixTimeRange: 'Fixed time interval',
    timeRange: 'Time ranges',
    vibrationAlarmLog: 'Vibration alarm log',
    workGroup: 'Wind turbines',
    sensor: 'Sensor',
    alertLog: 'Alarm log',
    variety: 'Variable type',
    alarmParam: 'Alarm variety',
    alarmLevel: 'Alarm level',
    paramValue: 'Value',
    threshold: 'Threshold',
    alarmTime: 'Alarm time',
    alarmStatus: 'Alarm status',
    verifier: 'Verifier',
    addVerify: 'Confirm alarm',
    onlyImage: 'Only upload image(.jpg, .jpeg, .png).',
    onlyAllowFileTypes: 'Only upload allowed file types(.jpg, .jpeg, .png, .gif, .pdf, .doc, .docx, .xls, .xlsx)',
    toAtlas: 'View atlas',
    success: {
      confirm: 'Confirm alarm successfully.',
      picture: 'Upload picture successfully.',
    },
    failure: {
      confirm: 'Failed to confirm the alarm.',
      picture: 'Failed to upload picture.',
    },
  },
  routineAtlas: {
    dataType: 'Data type',
    selectData: 'Select data',
    extremum: 'Vertical and horizontal extremum',
    motionState: '[Motion state]',
    trendData: '[Trend data]',
    timeAxis: 'Time',
    frequencyAxis: 'Frequency',
    amplitudeAxis: 'Amplitude',
    speedAxis: 'Speed',
    samplingPointsAxis: 'Sampling points',
    accelerationAxis: 'Vibration acceleration',
    speedAxis1: 'Speed',
    velocityAxis: 'Vibration velocity',
    subText: '{0}-{1}-{2}',
    subText1: '{0}-{1}({2}{3})-{4}',
    subText2: '{0}({1}):  {2} mm/s   â  {3}Â°   @{4} rpm',
    subTextNew: '{0}-{1}({2}{3})',
    totalText: 'Total {0}',
    accelerationPeak: 'Acceleration peak',
    speedEffective: 'Speed effective',
    frequency: 'Hz',
    doubling: 'Order',
    STFT: 'STFT',
    doubling1: '1x',
    doubling2: '2x',
    reset: 'Reset',
    phase: 'Phase',
    amplitude: 'Amplitude',
    dynamic: 'dynamic display',
    static: 'Static display',
    selectedSensors: 'Select up to 5 sensors',
    diff: 'X-axis and y-axis cannot take the same sensor',
    mainBearing: 'Main bearing',
    gearBox: 'Gear box',
    engine: 'Generator',
    analysisReport: ' Analysis Report',
    globalAnalysisReport: ' Global Analysis Report',
    vibrationAnalysisReport: 'Vibration Analysis Report',
    unverified: 'Unverified',
    verified: 'Verified',
    originalData: 'Original data',
    compareData: 'Comparative data',
    viewOriginalData: 'View original data',
    addToCompare: 'Add to compare',
    compare: 'Compare',
    currentDataCollectionInfo: 'Data collection info',
    variateSelect: 'Select variate',
    frequencyBand: 'Frequency band',
    dataCompare: 'Compare data',
    filterAnalysis: 'Filter analysis',
    functionType: 'Window function type',
    averageTimes: 'Average times',
    deleteRawData: 'Delete original data',
    computed: 'Calculate filter eigenvalue',
    eigenvalue: 'Eigenvalue',
    eigenvalueData: 'Eigenvalue data',
    isDelete: 'Are you sure to delete?',
    placeholder: {
      dataType: 'Select data type.',
      xAxisUnit: 'Abscissa unit.',
      orderSensor: 'Speed sensor.',
      timeRange: 'Time range.',
      trendDoubling: 'Select doubling.',
      functionType: 'Select window function type',
      averageTimes: 'Select average times',
      startFrequency: 'Start frequency',
      endFrequency: 'End frequency',
    },
    selectTypes: {
      realtime: 'Real-time data',
      history: 'Historical data',
      chartType: 'Chart Type',
      alarm: 'Alarm data',
      alarmStatistics: 'Alarm statistics',
      general: 'General appearance map',
      trend: 'Trend map',
      trendDoubling: 'Trend map(Doubling)',
      waveform: 'Waveform map',
      xwaveform: 'X-axis sensor waveform map',
      ywaveform: 'Y-axis sensor waveform map',
      spectrum: 'Spectrogram',
      cepstrumSpectrum: 'Cepstrum spectrum',
      envelope: 'Envelope analysis diagram',
      integral: 'Integral analysis chart',
      waterfall: 'Waterfall plot',
      axisOrbit: 'Axis orbit',
      zoomSpectrum: 'zoom spectrum',
      waveFilter: 'Wave filter',
      polar: 'Polar plot',
      halfHour: 'Last half hour',
      oneHour: 'Last 1 hour',
      twoHour: 'Last 2 hours',
      threeHour: 'Last 3 hours',
      sixHour: 'Last 6 hours',
      '12Hour': 'Last 12 hours',
      oneDay: 'Last day',
      threeDays: 'Last 3 days',
      fiveDays: 'Last 5 days',
      sixDays: 'Last 6 days',
      oneWeek: 'Last 1 week',
      oneMonth: 'Last month',
      oneQuarter: 'Last quarter',
      oneYear: 'Last year',
      specifiedWay: 'Specified way',
      specifiedValue: 'Specified way',
      drawFrequencyDoubling: 'Draw frequency doubling',
      drawSideband: 'Draw sideband',
      clearDrawing: 'Clear drawing',
      frequencyDoublingSetting: 'Frequency doubling setting',
      frequency: 'Frequency',
      vibrationAcceleration: 'Vibration acceleration',
      frequencyDoubling: 'Frequency doubling',
      inputFrequencyDoubling: 'Enter the frequency doubling number',
      exportRecord: 'Export record',
      reportFan: 'Create fan report record',
      reportFanList: 'Fan report record list',
      reportWindFarm: 'Create wind farm report record',
      reportWindFarmList: 'Wind farm report record list',
      exportData: 'Export data',
      hanning: 'Hanning window',
      rectangle: 'Rectangle window',
      heming: 'Heming window',
      flat: 'Flat window',
    },
    invalid: {
      selectParams: 'Select params.',
      selectRange: 'Select time range',
      noMore7Days: 'The time range of waterfall chart cannot exceed 7 days',
    },
    failure: {
      rowData: 'Failed to delete original data',
    },
    success: {
      rowData: 'Original data deleted successfully',
    },
    recordList: 'Record list',
    selectMap: 'Select map',
    downloadReport: {
      update: 'Update time',
      exportStatus: 'Export status',
      newBuild: 'New build',
      unfinished: 'Unfinished',
      finished: 'Finished',
      failure: 'Failure',
      download: 'Download report',
      startTask: 'Start task',
      startSuccess: 'Start task successfully',
      startFailure: 'Start task failure',
      selectOnce: 'Select at least one sensor',
      selectOnceMap: 'Select at least one map',
      selectOnceExtensionAndType: 'At least one type of spectrum expansion and frequency should be selected',
      selectOnceExtension: 'Select at least one map expansion type',
      selectOnceType: 'Select at least one frequency type',
    },
    map: 'Map',
    subitem: 'Subitem',
    acceleration: 'Acceleration',
    creatReportSuccess: 'Generation of wind turbine report task submitted',
    diagnosis: 'Diagnosis',
    createWindSuccess: 'Wind farm report task submitted',
    createTip: 'Note: please download the generated fan record report from the fan report list',
  },
  startStopAtlas: {
    rotingVelocity: 'Roting velocity',
    selectTypes: {
      nyquist: 'Nyquist diagram',
      bode: 'Bode map',
      speedTime: 'Speed time chart',
    },
  },
  projectSet: {
    editSncode: 'Edit Sncode',
    workGroup: 'Wind turbines',
    mingyang: 'Ming yang',
    hongfeng: 'Hong feng',
    xingang: 'Xin gang',
    rootTip: 'Select a group on the left, or create a new group by click the button on the right.',
    workGroupInfo: 'Wind turbines information',
    configInfo: 'Config information',
    addProject: 'Add group',
    addFactory: 'Add company',
    addWorkshop: 'Add wind farm',
    addMachine: 'Add wind turbines',
    editProject: 'Edit group',
    editFactory: 'Edit company',
    editWorkshop: 'Edit wind farm',
    editMachine: 'Edit wind turbines',
    deleteProject: 'Delete group',
    deleteFactory: 'Delete company',
    deleteWorkshop: 'Delete wind farm',
    deleteMachine: 'Delete wind turbines',
    engine: 'Generator',
    engine_free: 'Generator-free end',
    engine_inner: 'Generator-internal',
    engine_load: 'Generator-load end',
    gearbox: 'Gearbox',
    gearbox_high: 'Gearbox-high speed stage',
    gearbox_middle: 'Gearbox-itermediate stage',
    gearbox_low: 'Gearbox-low speed stage',
    bearing: 'Main bearing',
    bearing_top: 'Bearing',
    bearing_bottom: 'Bearing-bottom',
    outter: 'Others',
    variety: 'Variable',
    value: 'Value',
    selectModel: 'Select model',
    gatewayDeviceNumber: 'Data acquisition number',
    bindDataAcquisition: 'Bind data acquisition',
    unbindIdentifier: 'Unbind all the variables of sensor',
    noSupportChange: 'Data acquisition replacement is not supported temporarily.',
    noDifferentLocation: 'Variables under the same sensor cannot be associated with different positions.',
    syncDeviceInfo: 'Synchronize device info',
    syncDeviceInfoFromTass: 'Synchronize device information from TaSS.',
    syncConfig: 'Synchronize configuration',
    syncConfigToGroup: 'Synchronize configuration to group.',
    onlineHistory: 'Online history',
    onlineTime: 'Time',
    onlineStatus: 'Status',
    success: {
      config: 'Config successfully.',
      bindDataAcquisition: 'Bind successfully.',
      sync: 'Call the synchronization request successfully.',
      updateSncodeSuccess: 'Sncode update success',
    },
    failure: {
      config: 'Failed to config.',
      bindDataAcquisition: 'Failed to bind.',
      sync: 'Failed to call the synchronization request.',
    },
    invalid: {
      gatewayDeviceNumber: 'Enter the data acquisition number.',
    },
    placeholder: {
      gatewayDeviceNumber: 'Enter the data acquisition number.',
      sensor: 'Select sendor.',
    },
  },
  board: {
    alarmList: 'Alarm list',
    speedTrend: 'Speed trend map',
    temperatureTrend: 'Temperature trend map',
    speedUnit: 'Speed(rpm)',
    temperatureUnit: 'T(Â°C)',
  },
  device: {
    deviceInfo: 'Device info',
    lifeCycle: 'Life cycle',
    DEVICE_DELIVERY: 'Device delivery',
    DEVICE_UPGRADE: 'Device update',
    DEVICE_ALARM: 'Device alarm',
    EXPERT_DIAGNOSIS: 'Expert diagnosis',
    LOG_REPORT: 'Log report',
    DEVICE_SELF_CHECK: 'Device self check',
    DEVICE_REPLACE: 'Device replace',
    DEVICE_MAINTAIN: 'Device maintain',
    DEVICE_SCRAPPING: 'Device scrapping',
    deviceName: 'Name',
    deviceId: 'ID',
    LifeType: 'Type',
    occurTime: 'Time',
    process: 'Process',
    enterProcess: 'Please choose process',
    addRecord: 'Add record',
    downloadTemplate: 'Download template',
    placeholder: {
      deviceName: 'Select device name.',
      selectLifeType: 'Select life cycle type.',
      occurTime: 'Select time.',
    },
    success: {
      create: 'Add record successfully.',
      import: 'Import records successfully.',
      update: 'Update records successfully.',
      delete: 'Deledte records successfully',
    },
    failure: {
      create: 'Failed to add record.',
      import: 'Failed to import records.',
      update: 'Failed to update records.',
      delete: 'Failed to delete record.',
    },
  },
  sensor: {
    sensorManage: 'Sensor management',
    machineName: 'Fan name',
    deviceName: 'Device name',
    deviceNo: 'Device NO',
    type: 'Type',
    addType: 'Add sensor type',
    deleteType: 'Delete sensor type',
    ROTATING_VELOCITY: 'Rotating velocity',
    deleteTypeTitle: 'Are you sure to delete the following sensor type(s)?',
    deleteTypeTip: 'The data cannot be recovered after deletion.',
    placeholder: {
      type: 'Select sensor type.',
    },
    success: {
      addType: 'Add sensor type successfully.',
      deleteType: 'Delete sensor type successfully.',
    },
    failure: {
      addType: 'Failed to add sensor type.',
      deleteType: 'Failed to delete sensor type.',
    },
  },
  categoryMng: {
    searchText: 'Please enter category name',
    categoryName: 'Category name',
    enterCategoryName: 'Please enter category name within 32 characters',
    addCategory: 'Add category',
    addCategorySuccess: 'Add category success.',
    addCategoryFail: 'Add category fail.',
    updateCategory: 'Update category',
    updateCategorySuccess: 'Update category success.',
    updateCategoryFail: 'Update category fail.',
    deleteCategory: 'Delete category',
    deleteCategorySuccess: 'Delete category success.',
    deleteCategoryFail: 'Delete category fail.',
    deleteCategoryTip: 'Are you sure to delete the category?',
  },
  documentMng: {
    documentName: 'Document name',
    tags: 'Tags',
    enterTags: 'Separated by commas, within 32 chars',
    summary: 'Summary',
    enterSummary: 'Please enter summary within 32 characters',
    downloadCount: 'Download count',
    fileSize: 'File size',
    title: 'Title',
    enterTitle: 'Please enter title within 32 characters',
    category: 'Category',
    enterCategory: 'Please choose category',
    document: 'Document',
    importDocument: 'Import document',
    uploadDocument: 'Please upload document',
    uploadDocumentOnly: 'Only 1 document can upload.',
    uploadDocumentFail: 'Upload document fail.',
    uploadDocumentSuccess: 'Upload document success.',
    createDocumentFail: 'Create document fail.',
    createDocumentSuccess: 'Create document success.',
    updateDocumentFail: 'Update document fail.',
    updateDocumentSuccess: 'Update document success.',
    deleteDocumentFail: 'Delete document fail.',
    deleteDocumentSuccess: 'Delete document success.',
    addDocument: 'Add document',
    updateDocument: 'Update document',
    deleteDocument: 'Delete document',
    preview: 'Preview',
    download: 'Download',
    searchText: 'Title / Tags / Summary',
    only100M: 'OnlyÂ uploadÂ limitÂ 100MÂ document',
  },
  faultReasonList: {
    faultCauseName: 'Reason name',
    addReason: 'Add reason',
    farmTitle: 'Farm fault reasons',
    groupTitle: 'Group fault reasons',
    id: 'ID',
    name: 'Reason name',
    success: { addReason: 'Add reason name successfully.' },
    failure: { addReason: 'Failed to add reason name.' },
    fanName: 'Fan name',
    sensorName: 'Sensor name',
    featureName: 'Feature name',
    featureValue: 'Feature value',
    threshold: 'Threshold',
    level: 'Level',
    createdAt: 'Created time',
  },
  faultDiagnosis: {
    addDiagnosis: 'Add diagnosis',
    viewDiagnosis: 'View diagnosis',
    editDiagnosis: 'Edit diagnosis',
    faultCauseId: 'Fault cause',
    name: 'Name',
    level: 'Level',
    part: 'Part',
    suggest: 'Suggest',
    diagnosticianName: 'Diagnostician name',
    diagnosisAt: 'Diagnosis time',
    resolve: 'Resolve',
    resolved: 'Resolved',
    unresolved: 'Unresolved',
    push: 'Push',
    pushed: 'Pushed',
    unpushed: 'Unpushed',
    placeholder: {
      faultCauseId: 'Select fault cause.',
      name: 'Enter name.',
      level: 'Select level.',
      part: 'Select part.',
      suggest: 'Enter suggest.',
      feedback: 'Enter feedback',
    },
    invalid: {
      name: 'Invalid name, length: 0-50.',
      suggest: 'Invalid suggest, length: 0-255.',
    },
    success: {
      addDiagnosis: 'Add diagnosis successfully.',
      editDiagnosis: 'Edit diagnosis successfully.',
      handle: 'Handle successfully.',
      push: 'Push to group successfully.',
    },
    failure: {
      addDiagnosis: 'Failed to add diagnosis.',
      editDiagnosis: 'Failed to edit diagnosis.',
      handle: 'Failed to handle.',
      push: 'Failed to push to group.',
    },
    diagnosisName: 'Diagnosis name',
    batchName: 'Batch name',
    farmName: 'Farm name',
    machineName: 'Machine name',
    faultCauseName: 'Fault cause',
    viewDetail: 'View detail',
    feedback: 'Feedback',
  },
  faultDiagnosisBatch: {
    name: 'Name',
    status: 'Status',
    remark: 'Remark',
    beginAt: 'Begin Time',
    endAt: 'End Time',
    INITIAL: 'Initial',
    PENDING: 'Pending',
    FINISHED: 'Finished',
    pullPending: 'Pull pending batch from group',
    pull: 'Pull',
    addBatch: 'Add batch',
    editBatch: 'Edit batch',
    viewMachine: 'View fan',
    machineId: 'Fan ID',
    machineName: 'Fan name',
    faultDiagnosisId: 'Fault diagnosis ID',
    placeholder: {
      name: 'Enter name.',
      remark: 'Enter remark.',
    },
    success: {
      create: 'Create successfully.',
      update: 'Edit successfully.',
      pull: 'Pull data from group successfully.',
    },
    failure: {
      create: 'Failed to create.',
      update: 'Failed to edit.',
      pull: 'Failed to pull data from group.',
    },
    query: 'Query',
    viewFault: 'View fault',
  },
  equipmentMng: {
    equipment: 'Equipment',
    mainControlNo: 'Main Control No',
    mainControlName: 'Main Control Name',
    equipmentTemplateName: 'Equipment Template Name',
    newEquipment: 'New Equipment',
    product: 'Product',
    deleteEquipment: 'Delete Equipment',
    deleteTitle: 'Are you sure to delete the following device data?',
    deleteTip: 'Data cannot be recovered after deletion',
    detail: 'Detail',
    basicInfo: 'Basic Info',
    topologicalGraph: 'Topological Graph',
    mainControlNoLimit: 'The character length of main control number is 1 ~ 32',
    mainControlNameLimit: 'The character length of the master name is 1 ~ 50',
    equipmentNumber: 'Equipment Number',
    equipmentName: 'Equipment Name',
    masterIp: 'Master IP',
    speedPoint: 'Speed Point',
    speedRatio: 'Speed Ratio',
    pulsesPerweek: 'Number of pulses per week',
    snCode: 'SN Code',
    point: 'Point',
    placeholder: {
      mainControlNo: 'Please enter the master number',
      mainControlName: 'Please enter the master name',
      equipmentTemplateName: 'Please select a device template name',
      product: 'Please select a product',
      masterIp: 'Please enter the master IP',
      speedPoint: 'Please enter the speed measuring point',
      speedRatio: 'Please enter the speed ratio',
      pulsesPerweek: 'Please enter the number of pulses per week',
      point: 'Measuring point cannot be empty',
      snCode: 'Serial number cannot be empty',
    },
    invalid: {
      mainControlNo:
        'It is composed of 1 ~ 32-bit English letters, numbers, @, dots, underscores and middle dashes (except carriage return and tab)',
      enterNum: 'Please enter number',
    },
    success: {
      createEquipment: 'Device created successfully',
      deleteEquipment: 'Device deleted successfully',
    },
    failure: {
      createEquipment: 'Device creation failed',
      deleteEquipment: 'Device deletion failed',
    },
  },
  templateMng: {
    fanType: 'Fan Type',
    directDrive: 'Direct Drive',
    NonDirectDrive: 'Non Direct Drive',
    equipmentTemplate: 'Equipment template',
    newTemplate: 'Add equipment template',
    equipmentTemplateName: 'Equipment template name',
    Product: 'Product',
    remark: 'Remarks',
    addTemplate: 'Add equipment template',
    templateContent: 'Template content',
    acquisitionName: 'Acquisition board name ',
    passagewayName: 'Channel name',
    sensorName: 'Sensor name',
    product: 'Product',
    objectModel: 'Object Model',
    extendedField: 'Extended field',
    deleteTemplate: 'Delete device template',
    deleteTitle: 'Are you sure to delete the following template data?',
    deleteTip: 'Data cannot be recovered after deletion',
    editTemplate: 'Edit device template',
    detailTemplate: 'Equipment template details',
    newMainControl: 'Add master',
    mainControl: 'Master name',
    newAcquisition: 'Add acquisition board',
    newPassageway: 'New channel',
    newSensor: 'New sensor',
    editMainControl: 'Edit Master',
    editAcquisition: 'Edit acquisition board',
    editPassageway: 'Edit channel',
    editSensor: 'Edit sensor',
    mainControlNoLimit: 'The character length of main control number is 1 ~ 32',
    equipmentTemplateNameLimit: 'The name character length is 1 ~ 50',
    remarkLimit: 'The length of remark characters is 1 ~ 200',
    suffix: 'Suffix',
    type: 'Type',
    placeholder: {
      templateContent: 'Please create template content',
      equipmentTemplateName: 'Please enter a device template name',
      acquisitionName: 'Please enter the name of the acquisition board',
      passagewayName: 'Please enter a channel name',
      sensorName: 'Please enter sensor name',
      objectModel: 'Please select object model',
      extendedField: 'Please enter an extended field',
      remark: 'Please enter comments',
      product: 'Please select a product',
      mainControl: 'Please enter the master name',
      suffix: 'Please enter the suffix',
      type: 'Please select type',
      fanType: 'Please select the fan type',
    },
    invalid: {
      suffix: 'The suffix name cannot be underlined',
    },
    success: {
      createTemplates: 'Device template created successfully',
      deleteTemplates: 'Device template deleted successfully',
      updateTemplates: 'Device template updated successfully',
      sync: 'Device template synchronization succeeded',
    },
    failure: {
      createTemplates: 'Failed to create device template',
      deleteTemplates: 'Device template deletion failed',
      updateTemplates: 'Device template update failed',
      createContent: 'Incomplete template content',
      sync: 'Device template synchronization failed',
    },
  },
  productTemplate: {
    productTemplate: 'Product Template',
    newProductTemplate: 'New Product Template',
    productTemplateName: 'Product Template Name',
    templateName: 'Template Name',
    product: 'Product',
    objectModel: 'Object Model',
    mainControl: 'Main Control',
    acquisition: 'Acquisition',
    analogChannel: 'Analog Channel',
    digitalChannel: 'Digital Channel',
    vibrationSensor: 'Vibration Sensor',
    speedSensor: 'Speed Sensor',
    deleteTemplate: 'delete Product Template',
    deleteTitle: 'Are you sure to delete the following template data?',
    deleteTip: 'Data cannot be recovered after deletion',
    detailProductTemplate: 'Product template details',
    editProductTemplate: 'Edit product template',
    placeholder: {
      templateName: 'Please enter a template name',
      product: 'Please select a product',
      objectModel: 'Please select object model',
    },
    failure: {
      createProductTemplates: 'Failed to add product template',
      updateProductTemplate: 'Product template update failed',
      deleteProductTemplate: 'Failed to delete product template',
    },
    success: {
      createProductTemplates: 'Product template added successfully',
      updateProductTemplate: 'Product template updated successfully',
      deleteProductTemplate: 'Product template deleted successfully',
    },
  },
  errorCode: {
    '000': 'Internet error',
    200: 'Success',
    400: 'Bad request',
    401: 'Not certified',
    403: 'Prohibited',
    404: 'Not found',
    406: 'Not accepted',
    408: 'Request timeout',
    409: 'Conflict',
    411: 'Length required',
    412: 'Precondition failed',
    415: 'Unsupported media type',
    417: 'Expectation failed',
    500: 'Internal service exception',
    502: 'Bad gateway',
    503: 'Service unavailable',
    504: 'Gateway timeout',
    601: 'Required parameters cannot be empty or incorrect format',
    602: 'Illegal operation',
    603: 'Does not exist',
    604: 'Existed',
    605: 'Parameter missing.',
    236338: 'vibration monitor does not exist',
    236339: 'date format error',
    237009: 'the equipment account information is repeated inside, and the unit number under the same area and wind farm is unique',
    237010: 'excel import required field is empty [% s]',
    237012: 'generator information is repeated inside, and the generator model is unique',
    237013: 'excel import required field is empty [% s]',
    237015: 'account information approval failed because: [% s]',
    237016: 'excel import required field is empty [% s]',
    246301: 'alarm does not exist',
    370010: 'equipment category cannot be empty.',
    1060103: 'voucher mismatch',
    1060105: 'account or voucher error',
    1060107: 'verification code expired',
    1060108: 'verification code error',
    1060109: 'invalid token',
    1060110: 'expired password',
    1060111: 'the password is different between the two inputs.',
    1060206: 'account has been locked',
    1060302: 'account does not exist',
    1060304: 'account has been disabled',
    1060401: 'account exists',
    1160105: 'the role has been used and cannot be deleted.',
    1160106: 'permission has been used and cannot be deleted.',
    1160208: 'public role cannot be modified',
    1160209: 'role exceeds user',
    1160303: 'role does not exist',
    1160304: 'permission does not exist',
    1160307: 'user has no role binding',
    1160401: 'role exists',
    1160402: 'license exists',
    1260106: 'invalid account number',
    1260107: 'invalid verification code',
    1260108: 'invalid phone number',
    1260109: 'email invalid',
    1260110: 'invalid register type',
    1260111: 'use phone number',
    1260112: 'use email',
    1260113: 'current user cannot be operated',
    1260304: 'user does not exist',
    1260401: 'user name exists',
    1260402: 'email exists',
    1260403: 'mobile phone exists',
    1460203: 'hierarchy is the root hierarchy',
    1460204: 'hierarchy includes resources',
    1460205: 'region code does not exist',
    1460206: 'hierarchy ID cannot be null.',
    1460207: 'device type ID cannot be empty.',
    1460302: 'hierarchy does not exist',
    1460401: 'hierarchy exists',
    1560102: 'equipment for other machines',
    1560301: 'device does not exist',
    1750002: 'Minio server error',
    2350003: 'import file analysis failed',
    2350005: 'picture saving failed',
    2350006: 'picture deletion failed',
    2350007: 'picture acquisition failed',
    2350008: 'file export failed',
    2350009: 'file download failed',
    2350010: 'export file failed',
    2350011: 'file download failed',
    2350012: 'file download failed',
    2360113: 'import file format error',
    2360301: 'map book does not exist',
    2360302: 'bearing does not exist',
    2360304: 'transmission does not exist',
    2360310: 'working conditions do not exist',
    2360311: 'alarm setting does not exist',
    2360312: 'machine does not exist',
    2360314: 'working conditions include alarm settings',
    2360315: 'machine status does not exist',
    2360317: 'working conditions are not allowed to cross',
    2360318: 'alarm setting is not within the working condition value range',
    2360319: 'working condition does not include alarm set value',
    2360333: 'the number of imported data exceeds the limit',
    2360337: 'gearbox function does not exist',
    2360338: 'acceleration sensor does not exist',
    2360416: 'working conditions exist',
    2360419: 'alarm setting exists',
    2360420: 'global working conditions exist',
    2360421: 'public policy parameter item already exists',
    2360422: 'public policy already exists',
    2360423: 'identifier parameter item does not exist',
    2360424: 'public policy parameter item does not exist',
    2360425: 'identifier does not exist',
    2360426: 'public policy does not exist',
    2360427: 'identifier parameter exists',
    2360428: 'machine equipment does not exist',
    2370307: 'equipment No. is empty',
    2370308: 'the equipment account information is repeated, and the unit number under the same area and wind farm is unique',
    2370311: 'repeated generator information, unique generator model',
    2370314: 'repeated gearbox information, unique gearbox model',
    2370317: 'workshop ID is empty',
    2370318: 'spindle does not exist',
    2370319: 'generator does not exist',
    2370320: 'data format error',
    2370321: 'blade information does not exist',
    2370322: 'repeated blade information in Excel',
    2370323: 'blade information repeated',
    2370324: 'coupling does not exist',
    2370325: 'coupling information repeated',
    2370326: 'internal coupling information',
    2370327: 'spindle repeated',
    2370328: 'spindle model is empty',
    2370329: 'the ID corresponding to the equipment modification log is empty',
    2370330: 'device information and existence cannot be deleted',
    2370331: 'approved equipment information cannot be deleted',
    2370332: 'excel import required field is empty [% s]',
    2370333: 'excel import required field is empty [% s]',
    2370334: 'excel import required field is empty [% s]',
    2370335: 'coupling model is empty',
    2370401: 'bearing dictionary information does not exist',
    2370402: 'bearing dictionary information is used and cannot be modified',
    2370403: 'bearing dictionary information is repeated',
    2500001: 'fault cause name already exists',
    2500002: 'ID card of fault diagnosis batch cannot be empty',
    2500003: 'fault diagnosis batch does not exist',
    2500004: 'fault diagnosis batch name cannot be empty',
    2500005: 'fault diagnosis batch in progress already exists',
    2500006: 'operation status cannot be empty',
    2500007: 'operation status error',
    2500008: 'fault diagnosis ID cannot be empty',
    2500009: 'fault diagnosis does not exist',
    2500010: 'alarm ID cannot be empty',
    2500011: 'failed to obtain the group failure reason',
    2500012: 'failed to pull group failure reason list',
    2500013: 'failed to save failure reason to Group',
    2500014: 'fault diagnosis batch in progress does not exist',
    2500015: 'alarm record does not exist',
    2500016: 'alarm device level does not exist',
    2500017: 'fault reason cannot be empty',
    2500018: 'fault diagnosis name cannot be empty',
    2500019: 'fault reason cannot be empty',
    2500020: 'fault cause does not exist',
    2500021: 'fault diagnosis does not exist',
    2500022: 'alarm ID error',
    2500023: 'fault diagnosis batch ID is wrong',
    2500024: 'wrong wind farm ID',
    2500025: 'fault resolved',
    2500026: 'there is an ongoing fault diagnosis batch',
    2500027: 'there is no batch of fault diagnosis in progress in the Group',
    2500028: 'there is no fault diagnosis batch in the Group',
    2500029: 'sensor ID cannot be empty',
    2500030: 'sensor type cannot be empty',
    2500031: 'fan ID list cannot be empty',
    2500032: 'diagnosis name cannot be empty',
    2500033: 'fan level does not exist',
    2500034: 'wind farm level does not exist',
    2500035: 'fault diagnosis received data does not exist',
    2500036: 'fault diagnosis upload file cannot be empty',
    2500037: 'wrong fan ID list',
    2560000: 'field hierarchy data synchronization failed',
    2560312: 'scheduled job does not exist',
    2560313: 'cron is invalid.',
    2600031: 'exceeded the current maximum number of tasks',
    3360105: 'file size [% s] exceeds limit [% s]',
    3360106: 'file suffix [% s] exceeds the limit [% s]',
    3360203: 'file completed or bound',
    3360204: 'file MD5 is not equal, actual MD5 [% s], provide MD5 [% s]',
    3360301: 'file does not exist',
    3400000: 'group resource [% s] access error',
    3500001: 'group OTA task image is empty',
    3500002: 'team OTA task does not exist',
    3600001: 'group OTA image file content is empty',
    3700001: 'device template already exists',
    3700002: 'device template does not exist',
    3700003: 'equipment template cannot be edited',
    3700004: 'equipment template cannot be deleted',
    3700005: 'device template content does not exist',
    3700006: 'the device suffix is duplicated to some extent.',
    3700007: 'device suffix cannot be null.',
    3700008: 'the device suffix cannot contain underscores.',
    3700009: 'devicename cannot be null.',
    3800001: 'device template already exists',
    3800002: 'template device does not exist',
    3800003: 'the template device to be deleted is not the primary device',
    3800004: 'the template equipment has been bound to the fan',
    3800005: 'thing specification language does not exist',
    3900001: 'product template does not exist',
    3900002: 'product template cannot be edited',
    4000001: 'Product template ID is empty',
    4000002: 'product template and equipment template do not match',
    4700001: 'failed to read excel file.',
    4700002: 'failed to query computer data from group.',
    4700003: 'machine data has been bound to another machine.',
    4900001: 'export file does not exist',
    5000001: 'preset template does not exist',
    5100001: 'low cut is larger than high cut',
    5100002: 'high tangent is greater than sampling frequency',
    5100003: 'fan unbound data acquisition',
    5160301: 'invalid page offset',
    5160302: 'original data not exited.',
    5200001: 'device event does not exist',
    9100001: 'standard global error code',
    9100002: 'measurement point bound.',
    9100003: 'sensor bound.',
    9100004: 'dict kind already exists.',
    9100005: 'equipment part does not exist.',
    9100006: 'measuring point does not exist.',
    9100007: 'part type does not exist.',
    9100008: 'measurement point type does not exist.',
    9100009: 'part ID cannot be empty.',
    9100010: '%s',
    9100011: 'the content is empty.',
    9100012: 'failed to synchronize data from group.',
    9100013: 'failed to synchronize device type data from group.',
    9100014: 'failed to synchronize device template data from group.',
    9100015: 'failed to synchronize part type data from group.',
    9100016: 'synchronization point type data from group failed.',
    9100017: 'failed to synchronize industry field data from group.',
    9100018: 'the machine device is bound to another device.',
    9100019: 'device does not exist.',
    9100020: 'std device does not exist.',
    9100021: 'std device template does not exist.',
    33060202: 'unable to download unbound file',
    65100001: 'failed to build Kafka consumer client.',
    65100002: 'Kafka consumer is empty.',
    65100003: 'Kafka partition subject error.',
    65100004: 'Kafka get end offset error.',
    65100005: 'Kafka current end offset error.',
    65100006: 'Cassandra cannot query.',
    65100007: 'Cassandra query is manually disabled.',
    65100008: 'Cassandra query is automatically disabled.',
    5300001: 'End frequency is not validateã',
  },
};
